{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"re",
				"register_blueprint"
			],
			[
				"s",
				"splash"
			],
			[
				"Log",
				"LoginManager"
			],
			[
				"logout",
				"logout_user"
			],
			[
				"use",
				"username"
			],
			[
				"curr",
				"current_user"
			],
			[
				"login_",
				"login_required"
			],
			[
				"cur",
				"current_user"
			],
			[
				"or",
				"order"
			],
			[
				"for",
				"format"
			],
			[
				"se",
				"select_string"
			],
			[
				"limi",
				"limit"
			],
			[
				"l",
				"limit"
			],
			[
				"v",
				"ValueError"
			],
			[
				"get",
				"get_results"
			],
			[
				"limit",
				"limitstring"
			],
			[
				"order",
				"orderstring"
			],
			[
				"cla",
				"clause"
			],
			[
				"ord",
				"orderstring"
			],
			[
				"where",
				"wherestring"
			],
			[
				"wh",
				"where"
			],
			[
				"retur",
				"return_dict"
			],
			[
				"db",
				"db_manager"
			]
		]
	},
	"buffers":
	[
		{
			"file": "run_app.py",
			"settings":
			{
				"buffer_size": 1063,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "config.py",
			"settings":
			{
				"buffer_size": 82,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "import sqlite3\n\nimport config\nfrom model.user import User\nfrom model.goal import Goal\nfrom model.action import Action\n\nclass DBManager:\n\n\tdef __init__(self):\n\t\tself.db = sqlite3.connect(config.DATABASE_NAME)\n\n\tdef get_results(self, table, where=None, order=None, limit=None):\n\t\twherestring = \"\"\n\t\torderstring = \"\" \n\t\tlimitstring = \"\"\n\t\tparams = list()\n\t\t\n\t\tif where:\n\t\t\twherestring = \"WHERE\"\n\t\t\tfor clause in where:\n\t\t\t\twherestring +=  \" {0} {1} ? AND\".format(clause.left, clause.operator)\n\t\t\t\tparams.append(clause.right)\n\t\t\twherestring = wherestring[:-3]\n\t\t\n\t\tif order:\n\t\t\torderstring = \" ORDER BY {0} {1} \".format(order.column, order.direction)\n\t\t\n\t\tif limit:\n\t\t\tlimitstring = \" LIMIT {0} \".format(limit.value)\n\n\t\tselect_string = \"SELECT * FROM {0} {1}{2}{3};\".format(table, wherestring, orderstring, limitstring)\n\t\tparam_tuple = tuple(params)\n\t\tcursor = self.db.execute(select_string, param_tuple)\n\t\treturn cursor.fetchall()\t\t\n\n\tdef get_users(self, where=None, order=None, limit=None):\n\t\tusers = self.get_results(\"user\", where, order, limit)\n\n\t\treturn_list = list()\n\t\tfor row in users:\n\t\t\treturn_list.append(User(row))\n\t\treturn return_list\t\t\n\n\tdef get_user_by_ID(self, id):\n\t\tuser = self.get_results(\"user\", where=[WhereClause('id', '=', id)])\n\t\treturn User(user[0])\n\n\tdef get_goals(self, where=None, order=None, limit=None):\n\t\tgoals = self.get_results(\"goal\", where, order, limit)\n\n\t\treturn_list = list()\n\t\tfor row in goals:\n\t\t\treturn_list.append(Goal(row))\n\t\treturn return_list\n\n\tdef get_actions(self, where=None, order=None, limit=None):\n\t\tactions = self.get_results(\"action\", where, order, limit)\n\n\t\treturn_list = list()\n\t\tfor row in actions:\n\t\t\treturn_list.append(Action(row))\n\t\treturn return_list\n\n\tdef add_user(self):\n\t\tpass\n\n\tdef add_goal(self):\n\t\tpass\n\n\tdef add_action(self):\n\t\tpass\n\n\tdef edit_user(self):\n\t\tpass\n\n\tdef edit_goal(self):\n\t\tpass\n\n\tdef edit_action(self):\n\t\tpass\n\n\tdef delete_user(self):\n\t\tpass\n\n\tdef delete_goal(self):\n\t\tpass\n\n\tdef delete_action(self):\n\t\tpass\n\n\nclass WhereClause:\n\tallowable_operators = [\"<\", \"<=\", \"=\", \"!=\", \">\", \">=\", \"IS NULL\", \"IS NOT NULL\", \"LIKE\", \"EXISTS\"]\n\n\tdef __init__(self, left, operator, right):\n\t\tif operator in self.allowable_operators:\n\t\t\tself.left = left\n\t\t\tself.operator = operator\n\t\t\tself.right = right\n\t\telse:\n\t\t\traise ValueError('Bad operator: {0}'.format(operator))\n\nclass OrderClause:\n\tallowable_orderings = [\"ASC\", \"DESC\"]\n\n\tdef __init__(self, column, direction):\n\t\tif direction in self.allowable_orderings:\n\t\t\tself.column = column\n\t\t\tself.direction = direction\n\t\telse:\n\t\t\traise ValueError('Bad orientation: {0}'.format(direction))\n\nclass LimitClause:\n\tdef __init__(self, limit):\n\t\tif limit > 0:\n\t\t\tself.limit = int(limit)\n\t\telse:\n\t\t\traise ValueError('Bad limit: {0}'.format(limit))",
			"file": "db/db_manager.py",
			"file_size": 2867,
			"file_write_time": 131404124346644422,
			"settings":
			{
				"buffer_size": 2749,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/Files/Repos/flask_testing/maragi",
		"/D/Files/Repos/flask_testing/maragi/api",
		"/D/Files/Repos/flask_testing/maragi/common",
		"/D/Files/Repos/flask_testing/maragi/components/api",
		"/D/Files/Repos/flask_testing/maragi/components/dashboard",
		"/D/Files/Repos/flask_testing/maragi/components/home",
		"/D/Files/Repos/flask_testing/maragi/components/user_management",
		"/D/Files/Repos/flask_testing/maragi/templates/forms",
		"/D/Files/Repos/flask_testing/maragi/templates/inheritance",
		"/D/Files/Repos/flask_testing/maragi/templates/request"
	],
	"file_history":
	[
		"/D/Files/Repos/flask_testing/maragi/model/user.py",
		"/D/Files/Repos/flask_testing/maragi/components/user_management/login.py",
		"/D/Files/Repos/flask_testing/maragi/components/dashboard/dashboard.py",
		"/D/Files/Repos/flask_testing/maragi/components/home/index.py",
		"/D/Files/Repos/flask_testing/maragi/components/api/api.py",
		"/D/Files/Repos/flask_testing/maragi/components/splash_page/index.py",
		"/D/Files/Repos/flask_testing/maragi/maragi.sublime-project",
		"/D/Files/Repos/flask_testing/maragi/components/error_handling/error_pages.py",
		"/D/Files/Repos/flask_testing/maragi/components/dashboard/main.py",
		"/D/Files/Repos/flask_testing/maragi/db/db_manager.py",
		"/D/Files/Repos/flask_testing/maragi/templates/index.html",
		"/D/Files/Repos/flask_testing/maragi/components/auth/login.py",
		"/D/Files/Repos/flask_testing/maragi/db/maragi_schema.sql",
		"/D/Files/Repos/flask_testing/maragi/forms/login_form.py",
		"/D/Files/Repos/flask_testing/maragi/templates/routing/login.html",
		"/D/Files/Repos/flask_testing/maragi/logic/login.py",
		"/D/Files/Repos/flask_testing/maragi/db/initial_data.sql",
		"/D/Files/Repos/flask_testing/maragi/config.py",
		"/D/Files/Repos/flask_testing/maragi/templates/login.html",
		"/D/Files/Repos/flask_testing/maragi/templates/forms/login_form.py",
		"/D/Files/Repos/flask_testing/maragi/templates/forms/loginform.py",
		"/D/Files/Repos/flask_testing/maragi/model/account.py",
		"/D/Files/Repos/flask_testing/maragi/model/action.py",
		"/D/Files/Repos/flask_testing/maragi/model/goal.py",
		"/D/Files/Repos/flask_testing/maragi/README.md",
		"/D/Files/Repos/flask_testing/maragi/requirements.txt",
		"/D/Files/Repos/flask_testing/maragi/run_app.py",
		"/D/Files/Repos/flask_assignments/first-flask-assignment/app.py",
		"/D/Files/Repos/flask_testing/flask_introduction/run_app.py",
		"/D/Files/OneDrive/Documents/medium-term todo",
		"/D/Files/OneDrive/Documents/short-term todo"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"current_user",
			"))\n",
			"()\n"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "run_app.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1063,
						"regions":
						{
						},
						"selection":
						[
							[
								319,
								319
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "config.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 82,
						"regions":
						{
						},
						"selection":
						[
							[
								82,
								81
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "db/db_manager.py",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2749,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "maragi.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 208.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
